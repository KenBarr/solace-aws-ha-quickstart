{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation sub-template for Auto-scaling group deployment",
    "Parameters": {
        "SolaceDockerURL": {
            "Description": "Require URL to enterprise or Evaluation VMR, not Community",
            "Type": "String"
        },
        "BootDiskSize": {
            "ConstraintDescription": "Deployment supports 8 to 128 GB for boot volumes",
            "Default": "24",
            "Description": "Allocated EBS storage for boot disk",
            "MaxValue": "128",
            "MinValue": "8",
            "Type": "Number"
        },
        "ClusterInfoHandle": {
            "Description": "",
            "Type": "String"
        },
        "InstanceProfile": {
            "Description": "IAM Profile for the deployment",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair within the AWS region; all instances will launch with this key pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LinuxOSAMI": {
            "AllowedValues": [
                "CentOS-7-HVM",
                "Ubuntu-Server-16.04-LTS-HVM",
                "Amazon-Linux-HVM"
            ],
            "ConstraintDescription": "Supported versions of Linux AMIs for Solace Message Routers",
            "Default": "Amazon-Linux-HVM",
            "Description": "Operating system AMI for cluster instances",
            "Type": "String"
        },
        "NodeDesignation": {
            "Default": "unspecified",
            "Description": "Tag for deployed instances",
            "Type": "String"
        },
        "NodeInstanceType": {
            "AllowedValues": [
                "t2.large",
                "t2.xlarge",
                "m3.large",
                "m3.xlarge",
                "m4.large",
                "m4.xlarge",
                "c4.xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "t2.large",
            "Description": "Instance Type for Kafka brokers; select m3/m4 or i2 instance types for us-west-1 and sa-east-1",
            "Type": "String"
        },
        "NodeSecurityGroup": {
            "Description": "Comma separated list of security groups for the members of the cluster (e.g. sg-7f16e910,sg-4be93ca2); The security groups must be in the same VPC as the subnets",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "NodeSpotPrice": {
            "AllowedPattern": "([0-9]{1}[.]{1}[0-9]{2})",
            "ConstraintDescription": "Must be decimal numeric value",
            "Default": "0.00",
            "Description": "Spot Price to bid for requested instances (0.00 will result in using on-demand instances)",
            "Type": "String"
        },
        "NumNodes": {
            "Default": "1",
            "Description": "Number of Nodes in Auto-scaling Group",
            "MaxValue": "3",
            "MinValue": "1",
            "Type": "Number"
        },
        "ParentStackName": {
            "Description": "Wrapper stack for this deployment",
            "Type": "String"
        },
        "PersistentStorage": {
            "ConstraintDescription": "No more than 1024 GB per device (4 TB per node).",
            "Default": "0",
            "Description": "Allocated EBS storage for each block device (in GB; 4 devs per node); 0 indicates ephemeral storage only",
            "MaxValue": "1024",
            "MinValue": "0",
            "Type": "Number"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Default": "solace-aws-ha-quickstart/latest",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
            "Type": "String"
        },
        "SubnetID": {
            "Description": "Comma separated list of VPC subnet IDs for the cluster deployment (e.g. subnet-4b8d329f,subnet-bd73afc8); VPC must exist with proper configuration for Solacet cluster access (internal and external)and the subnets must be in the same VPC as the security groups",
            "Type": "List<AWS::EC2::Subnet::Id>"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2017.03.0.20170401-x86_64-gp2",
                "CENTOS7HVM": "CentOS Linux 7 x86_64 HVM EBS 1602-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-d7e1d2bd.3",
                "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170330"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-859bbfe2",
                "CENTOS7HVM": "ami-eec1c380",
                "US1604HVM": "ami-53624634"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-8369baed",
                "CENTOS7HVM": "ami-c74789a9",
                "US1604HVM": "ami-8a7face4"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-815625ee",
                "CENTOS7HVM": "ami-95cda6fa",
                "US1604HVM": "ami-6c681b03"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-a2bc03c1",
                "CENTOS7HVM": "ami-f068a193",
                "US1604HVM": "ami-dd07bbbe"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-8bf2fde8",
                "CENTOS7HVM": "ami-fedafc9d",
                "US1604HVM": "ami-c3dfd0a0"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-8601bce2",
                "CENTOS7HVM": "ami-af62d0cb",
                "US1604HVM": "ami-af0fb2cb"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-5b06d634",
                "CENTOS7HVM": "ami-9bf712f4",
                "US1604HVM": "ami-e9c01086"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-e5083683",
                "CENTOS7HVM": "ami-7abd0209",
                "US1604HVM": "ami-c0cff0a6"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-11130775",
                "CENTOS7HVM": "ami-bb373ddf",
                "US1604HVM": "ami-036b7f67"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-a97013c5",
                "CENTOS7HVM": "ami-26b93b4a",
                "US1604HVM": "ami-c21370ae"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-22ce4934",
                "CENTOS7HVM": "ami-6d1c2007",
                "US1604HVM": "ami-4dd2575b"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-7bfcd81e",
                "CENTOS7HVM": "ami-6a2d760f",
                "US1604HVM": "ami-38f5d15d"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-9e247efe",
                "CENTOS7HVM": "ami-af4333cf",
                "US1604HVM": "ami-e6095386"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-8ca83fec",
                "CENTOS7HVM": "ami-d2c924b2",
                "US1604HVM": "ami-fa27b39a"
            }
        },
        "AWSInfoRegionMap": {
            "ap-northeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-northeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-south-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ca-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "sa-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            }
        },
        "LinuxAMINameMap": {
            "Amazon-Linux-HVM": {
                "Code": "AMZNLINUXHVM"
            },
            "CentOS-7-HVM": {
                "Code": "CENTOS7HVM"
            },
            "Ubuntu-Server-16.04-LTS-HVM": {
                "Code": "US1604HVM"
            }
        },
        "Linux2BootDisk": {
            "Amazon-Linux-HVM": {
                "BootDisk": "/dev/xvda"
            },
            "CentOS-7-HVM": {
                "BootDisk": "/dev/sda1"
            },
            "Ubuntu-Server-16.04-LTS-HVM": {
                "BootDisk": "/dev/sda1"
            }
        }
    },
    "Conditions": {
        "EphemeralStorage": {
            "Fn::Equals": [
                {
                    "Ref": "PersistentStorage"
                },
                "0"
            ]
        },
        "OnDemandInstances": {
            "Fn::Equals": [
                {
                    "Ref": "NodeSpotPrice"
                },
                "0.00"
            ]
        }
    },
    "Resources": {
        "NodesReadyHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "NodesReadyCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Handle": {
                    "Ref": "NodesReadyHandle"
                },
                "Timeout": "2400",
                "Count": {
                    "Ref": "NumNodes"
                }
            }
        },
        "Nodes": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "SubnetID"
                },
                "LaunchConfigurationName": {
                    "Ref": "NodeLaunchConfig"
                },
                "MinSize": 0,
                "MaxSize": {
                    "Ref": "NumNodes"
                },
                "DesiredCapacity": {
                    "Ref": "NumNodes"
                }
            }
        },
        "NodeLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config" : {
                        "files": {
                            "/tmp/gen-cluster-hosts.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/gen-cluster-hosts.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/wait-for-child-resource.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/wait-for-child-resource.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/wait-for-resource.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/wait-for-resource.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/install-ansible.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/install-ansible.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/install-docker.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/install-docker.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/install-solace.sh": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/install-solace.sh"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/solace-ansible.tgz": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "AWSInfoRegionMap",
                                                    { "Ref": "AWS::Region" },
                                                    "QuickStartS3URL"
                                                ]
                                            },
                                            { "Ref": "QSS3BucketName" },
                                            { "Ref": "QSS3KeyPrefix" },
                                            "scripts/solace-ansible.tgz"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "EphemeralStorage",
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOSAMI"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "VirtualName": "ephemeral0"
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "VirtualName": "ephemeral1"
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "VirtualName": "ephemeral2"
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "VirtualName": "ephemeral3"
                            },
                            {
                                "DeviceName": "/dev/sdf",
                                "VirtualName": "ephemeral4"
                            },
                            {
                                "DeviceName": "/dev/sdg",
                                "VirtualName": "ephemeral5"
                            },
                            {
                                "DeviceName": "/dev/sdh",
                                "VirtualName": "ephemeral6"
                            },
                            {
                                "DeviceName": "/dev/sdi",
                                "VirtualName": "ephemeral7"
                            },
                            {
                                "DeviceName": "/dev/sdj",
                                "VirtualName": "ephemeral8"
                            },
                            {
                                "DeviceName": "/dev/sdk",
                                "VirtualName": "ephemeral9"
                            },
                            {
                                "DeviceName": "/dev/sdl",
                                "VirtualName": "ephemeral10"
                            },
                            {
                                "DeviceName": "/dev/sdm",
                                "VirtualName": "ephemeral11"
                            }
                        ],
                        [
                            {
                                "DeviceName": {
                                    "Fn::FindInMap": [
                                        "Linux2BootDisk",
                                        {
                                            "Ref": "LinuxOSAMI"
                                        },
                                        "BootDisk"
                                    ]
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "BootDiskSize"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdb",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdc",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sdd",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            },
                            {
                                "DeviceName": "/dev/sde",
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "PersistentStorage"
                                    },
                                    "DeleteOnTermination": "True"
                                }
                            }
                        ]
                    ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "LinuxAMINameMap",
                                {
                                    "Ref": "LinuxOSAMI"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "SecurityGroups": {
                    "Ref": "NodeSecurityGroup"
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                },
                "SpotPrice": {
                    "Fn::If": [
                        "OnDemandInstances",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Ref": "NodeSpotPrice"
                        }
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "AssociatePublicIpAddress": "true",
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n",
                                "function error_exit\n",
                                "{\n",
                                " cfn-signal -e 1 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                " exit 1\n",
                                "}\n",
                                "\n",
                                "PATH=$PATH:/usr/local/bin \n",
                                "\n",
                                "## Install core O/S packages\n",
                                "if [ ! -f /usr/bin/jq ] ; then \n",
                                "  [ `which yum` ] && yum install -y jq \n",
                                "  [ `which apt-get` ] && apt-get -y install jq \n",
                                "fi \n",
                                "\n",
                                "which pip &> /dev/null \n",
                                "if [ $? -ne 0 ] ; then \n",
                                "  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip)\n",
                                "  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip\n",
                                "fi \n",
                                "pip install --upgrade pip\n",
                                "pip install awscli --ignore-installed six\n",
                                "\n",
                                "## Install and Update CloudFormation\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "## Signal that the node is up\n",
                                "cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resource Nodes\n",
                                "\n",
                                "## Retrieve scripts to deploy Solace on the instances \n",
                                "##  cfn-init downloads everything \n",
                                "##  and then we're off to the races \n",
                                "cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource NodeLaunchConfig ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "AMI_SBIN=/tmp \n",
                                "\n",
                                "## Wait for all nodes to come on-line\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " MonitorStack Nodes\n",
                                "$AMI_SBIN/wait-for-child-resource.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                " MessageRouterStack Nodes\n",
                                "\n",
                                "## Now find the private IP addresses of all deployed nodes\n",
                                "##   (generating /tmp/solacehosts and /tmp/<role> files)\n",
                                "$AMI_SBIN/gen-cluster-hosts.sh ",
                                {
                                    "Ref": "ParentStackName"
                                },
                                "\n",
                                "\n",
                                "## Tag the instance (now that we're sure of launch index)\n",
                                "##   NOTE: ami_launch_index is correct onlyi within a single subnet)\n",
                                "instance_id=$(curl -f http://instance-data/latest/meta-data/instance-id)\n",
                                "ami_launch_index=$(curl -f http://instance-data/latest/meta-data/ami-launch-index)\n",
                                "launch_node=$(grep -w `hostname` /tmp/",
                                {
                                    "Ref": "NodeDesignation"
                                },
                                "s | awk '{print $2}')\n",
                                "if [ -n \"$launch_node\" ] ; then\n",
                                "  launch_index=${launch_node#*NODE}\n",
                                "else\n",
                                "  launch_index=${ami_launch_index}\n",
                                "fi\n",
                                "if [ -n \"$instance_id\" ] ; then\n",
                                "  instance_tag=",
                                {
                                    "Ref": "NodeDesignation"
                                },
                                "-${launch_index}\n",
                                "  aws ec2 create-tags",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --resources $instance_id --tags Key=Name,Value=$instance_tag\n",
                                "fi\n",
                                "\n",
                                "## [ OPTIONAL ] Open up ssh to allow direct login\n",
                                "#sed -i 's/ChallengeResponseAuthentication .*no$/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config\n",
                                "#service sshd restart\n",
                                "\n",
                                "## If all went well, signal success (must be done by ALL nodes in group)\n",
                                "cfn-signal -e 0 -r 'Solace node deployment complete' '",
                                {
                                    "Ref": "NodesReadyHandle"
                                },
                                "'\n",
                                "\n",
                                "## Wait for all nodes to issue the signal\n",
                                "$AMI_SBIN/wait-for-resource.sh NodesReadyCondition \n",
                                "\n",
                                "## Signal back information for outputs (now that all nodes are up) \n",
                                "cfn-signal -e 0 -r 'Solace HA deployment complete' '",
                                {
                                    "Ref": "ClusterInfoHandle"
                                },
                                "'\n",
                                "\n"
                                "## Install Docker\n",
                                "$AMI_SBIN/install-docker.sh \n",
                                "\n",
                                "## Install Ansible\n",
                                "$AMI_SBIN/install-ansible.sh -f /tmp/solace-ansible.tgz\n",
                                "\n",
                                "## Install Solace\n",
                                "$AMI_SBIN/install-solace.sh SolaceDockerURL\n",
                                "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        }
    }
}